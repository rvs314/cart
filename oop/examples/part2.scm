(define-module (cart oop examples part2)
  #:use-module (oop goops)
  #:use-module (shorthand ffi)
  #:use-module (shorthand io)
  #:use-module (cart oop contexts)
  #:use-module (cart oop types)
  #:use-module (cart oop functions)
  #:use-module (cart oop rvalues)
  #:use-module (cart oop compiling)
  #:use-module (cart oop objects)
  #:use-module ((system foreign) #:prefix ffi:)
  #:duplicates (merge-generics))

(define (build-square)
  (with-new-context
   (define i      (param (int) "i"))
   (define square (function "square" (int) (list i) #:exported? #t))
   (define blk    (block square))
   (define exp    (multiplication i i (int)))
   (block-end-return! blk exp)
   (define res (compile!))
   (get-function res 'square ffi:int (list ffi:int))))

(define (main)
  (define s (build-square))         
  (s 24))
