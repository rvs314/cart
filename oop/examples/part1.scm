(define-module (cart oop examples part1)
  #:use-module (oop goops)
  #:use-module (shorthand ffi)
  #:use-module (shorthand io)
  #:use-module (cart oop contexts)
  #:use-module (cart oop types)
  #:use-module (cart oop functions)
  #:use-module (cart oop rvalues)
  #:use-module (cart oop compiling)
  #:use-module (cart oop objects)
  #:use-module ((system foreign) #:prefix ffi:)
  #:duplicates (merge-generics))

(define (build-greeter)
  (with-new-context
   (define name   (param (const-char-pointer) "name"))
   (define greet  (function "greet" (void) (list name) #:exported? #t))
   (define fmt    (param (const-char-pointer) "format"))
   (define printf (imported-function "printf" (void) (list fmt) #:variadic? #t))
   (define blk    (block greet))
   (define call   (function-call printf (list (string-literal "Hello, %s\n") name)))
   (block-eval! blk call)
   (block-end-return! blk)
   (define res (compile!))
   (get-function res 'greet ffi:void (list '*))))

(define (main)
  (define g (build-greeter))         
  (g (->pointer "World!")))
